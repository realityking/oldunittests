<?php
require_once 'PHPUnit/Framework.php';

require_once JPATH_BASE . '/libraries/joomla/installer/installer.php';

/**
 * Test class for JInstaller.
 * Generated by PHPUnit on 2009-10-27 at 15:20:37.
 */
class JInstallerTest extends JoomlaTestCase
{
	/**
	 * @var JInstaller
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		parent::setUp();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		parent::tearDown();
	}

	/**
	 * @todo Implement testAbort().
	 */
	public function testAbortFile()
	{
		$this->saveFactoryState();

		$newDbo = $this->getMock('test');

		JFactory::$database = &$newDbo;

		copy(JPATH_BASE.'/tests/_data/installer_packages/com_alpha/com_alpha.jpg', dirname(__FILE__).'/tmp/com_alpha.jpg');

		$this->object = JInstaller::getInstance();
		$this->object->pushStep(array('type' => 'file', 'path' => dirname(__FILE__).'/tmp/com_alpha.jpg'));


		$this->assertThat(
			$this->object->abort(),
			$this->isTrue()
		);

		$this->assertThat(
			file_exists(dirname(__FILE__).'/tmp/com_alpha.jpg'),
			$this->isFalse()
		);

		$this->restoreFactoryState();
	}

	/**
	 * @todo Implement testAbort().
	 */
	public function testAbortFolder()
	{
		$this->saveFactoryState();

		$newDbo = $this->getMock('test');

		JFactory::$database = &$newDbo;

		//TODO - remove dependence on JFolder
		if (file_exists(dirname(__FILE__).'/tmp/en-GB')) {
			JFolder::delete(dirname(__FILE__).'/tmp/en-GB');
		}
		JFolder::copy(JPATH_BASE.'/tests/_data/installer_packages/com_alpha/language/en-GB', dirname(__FILE__).'/tmp/en-GB');

		$this->object = JInstaller::getInstance();
		$this->object->pushStep(array('type' => 'folder', 'path' => dirname(__FILE__).'/tmp/en-GB'));


		$this->assertThat(
			$this->object->abort(),
			$this->isTrue()
		);

		$this->assertThat(
			file_exists(dirname(__FILE__).'/tmp/en-GB'),
			$this->isFalse()
		);

		$this->restoreFactoryState();
	}

	/**
	 * @todo Implement testAbort().
	 */
	public function testAbortExtension()
	{
		$this->saveFactoryState();

		$newDbo = $this->getMock('test', array('setQuery', 'query'));

		$newDbo->expects($this->once())
			->method('setQuery')
			->with($this->equalTo('DELETE FROM `#__extensions` WHERE extension_id = 3'));

		$newDbo->expects($this->once())
			->method('Query')
			->with()
			->will($this->returnValue(true));

		JFactory::$database = &$newDbo;

		//$this->object = JInstaller::getInstance();
		$this->object = new JInstaller;
		$this->object->pushStep(array('type' => 'extension', 'id' => 3));

		$this->assertThat(
			$this->object->abort(),
			$this->isTrue()
		);

		$this->restoreFactoryState();
	}

	/**
	 * Test that an abort message results in a raised warning
	 */
	public function testAbortMsg()
	{
		$this->saveFactoryState();

		$newDbo = $this->getMock('test');

		JFactory::$database = &$newDbo;

		//$this->object = JInstaller::getInstance();
		$this->object = new JInstaller;

		$this->setExpectedError(array('code' => 100, 'message' => 'Warning Text'));

		$this->assertThat(
			$this->object->abort('Warning Text'),
			$this->isTrue()
		);

		$this->restoreFactoryState();
	}
}

